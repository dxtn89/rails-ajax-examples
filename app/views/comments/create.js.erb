<%# NOTE this removes any error messages that were previously generated. %>
function removeErrorMessage(element) {
    if(!element || !document.querySelector(element)) {
        return;
    }
    document.querySelector(element).remove();
}

<%# NOTE this selects the `<form>` in `app/views/posts/show.html.erb` and dynamically injects the `app/views/shared/_validation-messages.html.erb` partial.   %>
function displayErrorMessage(element) {
    if (!element || !document.querySelector(element)) {
        
    }
    <%# NOTE we need to add `if @comment.errors.any?` becuase the ruby will be evaluated first. %>
    document.querySelector(element).insertAdjacentHTML('afterbegin', '<%= escape_javascript(render "shared/validation-messages", object: @comment) if @comment.errors.any? %>');
}

<%# NOTE this selects `<div id="comments">` in `app/views/posts/show.html.erb` and dynamically injects the `app/views/comments/_comment.html.erb` partial. %>
function addComment(element){
    if(!element || !document.querySelector(element)) {
        return;
    }
    <%# NOTE we need to add `uless @comment.errors.any?` becuase the ruby code will be evaluated first. Otherwise it would try to render the partial with a `nil` `@comment` %>
    document.querySelector(element).insertAdjacentHTML('afterbegin', '<%= escape_javascript(render @comment) unless @comment.errors.any? %>') ;
}

<%# NOTE this selects the `<form>` in `app/views/posts/show.html.erb` and resets the text area. %>
function clearForm(form) {
    if(!form || !document.querySelector(form)) {
        return;
    }
    document.querySelector(form).reset();
}

<% if @comment.errors.any? %>
    removeErrorMessage('#error_explanation');
    displayErrorMessage('#comments-form');
<% else %>
    removeErrorMessage('#error_explanation');
    addComment('#comments');
    clearForm('#comments-form');
<% end %>